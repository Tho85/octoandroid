package com.nairbspace.octoandroid.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nairbspace.octoandroid.data.db.PrinterDbEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRINTER".
*/
public class PrinterDbEntityDao extends AbstractDao<PrinterDbEntity, Long> {

    public static final String TABLENAME = "PRINTER";

    /**
     * Properties of entity PrinterDbEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ApiKey = new Property(2, String.class, "apiKey", false, "api_key");
        public final static Property Scheme = new Property(3, String.class, "scheme", false, "SCHEME");
        public final static Property Host = new Property(4, String.class, "host", false, "HOST");
        public final static Property Port = new Property(5, int.class, "port", false, "PORT");
        public final static Property VersionJson = new Property(6, String.class, "versionJson", false, "version_json");
        public final static Property ConnectionJson = new Property(7, String.class, "connectionJson", false, "connection_json");
        public final static Property PrinterStateJson = new Property(8, String.class, "printerStateJson", false, "printer_state_json");
    };


    public PrinterDbEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PrinterDbEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL UNIQUE ," + // 1: name
                "\"api_key\" TEXT NOT NULL ," + // 2: apiKey
                "\"SCHEME\" TEXT NOT NULL ," + // 3: scheme
                "\"HOST\" TEXT NOT NULL ," + // 4: host
                "\"PORT\" INTEGER NOT NULL ," + // 5: port
                "\"version_json\" TEXT," + // 6: versionJson
                "\"connection_json\" TEXT," + // 7: connectionJson
                "\"printer_state_json\" TEXT);"); // 8: printerStateJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINTER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrinterDbEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getApiKey());
        stmt.bindString(4, entity.getScheme());
        stmt.bindString(5, entity.getHost());
        stmt.bindLong(6, entity.getPort());
 
        String versionJson = entity.getVersionJson();
        if (versionJson != null) {
            stmt.bindString(7, versionJson);
        }
 
        String connectionJson = entity.getConnectionJson();
        if (connectionJson != null) {
            stmt.bindString(8, connectionJson);
        }
 
        String printerStateJson = entity.getPrinterStateJson();
        if (printerStateJson != null) {
            stmt.bindString(9, printerStateJson);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrinterDbEntity readEntity(Cursor cursor, int offset) {
        PrinterDbEntity entity = new PrinterDbEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // apiKey
            cursor.getString(offset + 3), // scheme
            cursor.getString(offset + 4), // host
            cursor.getInt(offset + 5), // port
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // versionJson
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // connectionJson
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // printerStateJson
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrinterDbEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setApiKey(cursor.getString(offset + 2));
        entity.setScheme(cursor.getString(offset + 3));
        entity.setHost(cursor.getString(offset + 4));
        entity.setPort(cursor.getInt(offset + 5));
        entity.setVersionJson(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConnectionJson(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrinterStateJson(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrinterDbEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrinterDbEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
