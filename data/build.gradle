apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt' // Dagger2
apply plugin: 'com.fernandocejas.frodo' // Frodo RxLogger

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
    }

    publishNonDefault true // Publishes all variations, main module must specify release or compile
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            // Placement for compile options in main project
        }
    }
}

dependencies {
    def dataDependencies = rootProject.ext.dataDependencies
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile project(':domain')

    provided dataDependencies.javaxInject
    compile dataDependencies.greenDao
    compile dataDependencies.rxAndroid
    compile dataDependencies.websocketsRxJava
    compile dataDependencies.retrofit
    compile dataDependencies.retrofitGsonConverter
    compile dataDependencies.retrofitRxJavaAdapter
    compile dataDependencies.okHttpLoggingInterceptor
    compile dataDependencies.okHttpWebsocket
    provided dataDependencies.autoValueAnnotations
    apt dataDependencies.autoValue
    apt dataDependencies.autoValueGson
}