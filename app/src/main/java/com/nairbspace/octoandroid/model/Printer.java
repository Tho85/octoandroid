package com.nairbspace.octoandroid.model;

import com.nairbspace.octoandroid.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PRINTER".
 */
public class Printer {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String api_key;
    /** Not-null value. */
    private String scheme;
    /** Not-null value. */
    private String host;
    private int port;
    private Long versionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PrinterDao myDao;

    private Version version;
    private Long version__resolvedKey;


    public Printer() {
    }

    public Printer(Long id) {
        this.id = id;
    }

    public Printer(Long id, String name, String api_key, String scheme, String host, int port, Long versionId) {
        this.id = id;
        this.name = name;
        this.api_key = api_key;
        this.scheme = scheme;
        this.host = host;
        this.port = port;
        this.versionId = versionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPrinterDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getApi_key() {
        return api_key;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setApi_key(String api_key) {
        this.api_key = api_key;
    }

    /** Not-null value. */
    public String getScheme() {
        return scheme;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setScheme(String scheme) {
        this.scheme = scheme;
    }

    /** Not-null value. */
    public String getHost() {
        return host;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHost(String host) {
        this.host = host;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public Long getVersionId() {
        return versionId;
    }

    public void setVersionId(Long versionId) {
        this.versionId = versionId;
    }

    /** To-one relationship, resolved on first access. */
    public Version getVersion() {
        Long __key = this.versionId;
        if (version__resolvedKey == null || !version__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionDao targetDao = daoSession.getVersionDao();
            Version versionNew = targetDao.load(__key);
            synchronized (this) {
                version = versionNew;
            	version__resolvedKey = __key;
            }
        }
        return version;
    }

    public void setVersion(Version version) {
        synchronized (this) {
            this.version = version;
            versionId = version == null ? null : version.getId();
            version__resolvedKey = versionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
