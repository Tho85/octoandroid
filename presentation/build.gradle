apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt' // Dagger2
apply plugin: 'com.jakewharton.hugo' // Hugo
apply plugin: 'io.fabric' // Crashlytics

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    productFlavors {
        dev {
            minSdkVersion 21 // Prevents time consuming dex merging processes
        }
        prod {
            minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        }
    }

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    dexOptions {
        maxProcessCount 2
        javaMaxHeapSize "2g"
    }

    defaultConfig {
        applicationId globalConfiguration.getAt("androidApplicationId")
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        resValue "string", "google_app_id", MyGoogleAppId
        manifestPlaceholders = [
                crashlyticsName : CrashlyticsName,
                crashlyticsApiKey: CrashlyticsApiKey,
        ]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "my_ip_address", BlankIpAddress
            resValue "string", "my_api_key", BlankApiKey
        }
        debug {
            ext.enableCrashlytics = false; // Disables sending mapping file and ID generation
            resValue "string", "my_ip_address", MyIpAddress
            resValue "string", "my_api_key", MyApiKey
        }
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/layouts',
                    'src/main/res/layouts/main',
                    'src/main/res/layouts/playback_controls',
                    'src/main/res/layouts/connection',
                    'src/main/res/layouts/status',
                    'src/main/res/layouts/files',
                    'src/main/res/layouts/add_printer',
                    'src/main/res/layouts/temp_graph',
                    'src/main/res/layouts/temp_controls',
                    'src/main/res/layouts/printer_controls',
                    'src/main/res/layouts/printer_settings',
            ]
        }
    }
}

dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])

    debugCompile project(path: ':data', configuration: 'debug')
    releaseCompile project(path: ':data', configuration: 'release')

    compile presentationDependencies.appcompat_v7
    compile presentationDependencies.preference_v7
    compile presentationDependencies.design
    compile presentationDependencies.cardview_v7
    compile presentationDependencies.recyclerView_v7
    compile presentationDependencies.support_v4
    compile presentationDependencies.percent
    compile presentationDependencies.playServicesVision // QR Decoder
    compile presentationDependencies.butterknife
    apt presentationDependencies.butterknifeCompiler
    compile presentationDependencies.dagger
    apt presentationDependencies.daggerCompiler
    compile presentationDependencies.timber
    compile presentationDependencies.eventBus
    debugCompile presentationDependencies.leakCanary
    releaseCompile presentationDependencies.leakCanaryNoOp
    testCompile presentationDependencies.leakCanaryNoOp
    provided presentationDependencies.autoValueAnnotations
    apt presentationDependencies.autoValueParcel // AutoValue Parcelable
    compile presentationDependencies.mpAndroidChart
    compile(presentationDependencies.crashlytics) { transitive = true; }

    androidTestCompile (presentationTestDependencies.espressoRunner) { exclude module: "support-annotations" }
    androidTestCompile (presentationTestDependencies.jUnitRules) { exclude module: "support-annotations" }
    androidTestCompile (presentationTestDependencies.espressoCore) { exclude module: "support-annotations" }
    androidTestCompile presentationTestDependencies.uiAutomator
    androidTestCompile (presentationTestDependencies.espressoContrib) {
        exclude module: "support-annotations"
        exclude module: "support-v4"
        exclude module: "appcompat-v7"
        exclude module: "design"
        exclude module: "recyclerview-v7"
    }
    testCompile presentationTestDependencies.roboelectric
    testCompile presentationTestDependencies.mockito
}
